#!/usr/bin/env node
import esbuild from 'esbuild';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function buildWorker() {
  try {
    const result = await esbuild.build({
      entryPoints: ['./app/lib/workers/speech-worker-source.js'],
      bundle: true,
      format: 'iife',
      platform: 'browser',
      outfile: './public/speech-worker-bundled.js',
      minify: false,
      sourcemap: false,
      external: [],
      loader: {
        '.js': 'js',
        '.wasm': 'file',
      },
      define: {
        'process.env.NODE_ENV': '"production"',
        'import.meta.url': '"https://localhost:3000/"', // TODO: need to figure out what this is for and what it should be in prod
      },
      banner: {
        js: `
// Worker bundle generated by esbuild
// Polyfill for import.meta.url
if (typeof globalThis.importMetaUrl === 'undefined') {
  globalThis.importMetaUrl = self.location ? self.location.href : 'https://localhost:3000/';
}
`,
      },
      logLevel: 'info',
      plugins: [
        {
          name: 'import-meta-url',
          setup(build) {
            build.onLoad({ filter: /\.js$/ }, async (args) => {
              const fs = await import('fs');
              let contents = await fs.promises.readFile(args.path, 'utf8');
              contents = contents.replace(/import\.meta\.url/g, 'globalThis.importMetaUrl');
              
              return {
                contents,
                loader: 'js',
              };
            });
          },
        },
      ],
    });
    
    console.log('✅ Worker bundled successfully!');
  } catch (error) {
    console.error('❌ Failed to bundle worker:', error);
    process.exit(1);
  }
}

buildWorker();