#!/usr/bin/env node
import esbuild from 'esbuild';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function buildWorker() {
  try {
    const result = await esbuild.build({
      entryPoints: ['./app/lib/workers/speech-worker-source.js'],
      bundle: true,
      format: 'iife', // Use IIFE format for classic worker
      platform: 'browser',
      outfile: './public/speech-worker-bundled.js',
      minify: false,
      sourcemap: false,
      // Bundle everything inline
      external: [],
      loader: {
        '.js': 'js',
        '.wasm': 'file',
      },
      define: {
        'process.env.NODE_ENV': '"production"',
        // Replace import.meta.url with a static string
        'import.meta.url': '"https://localhost:3000/"',
      },
      // Handle import.meta.url in dependencies
      banner: {
        js: `
// Worker bundle generated by esbuild
// Polyfill for import.meta.url
if (typeof globalThis.importMetaUrl === 'undefined') {
  globalThis.importMetaUrl = self.location ? self.location.href : 'https://localhost:3000/';
}
`,
      },
      logLevel: 'info',
      // Use plugins to handle special cases
      plugins: [
        {
          name: 'import-meta-url',
          setup(build) {
            // Replace import.meta.url with a fallback
            build.onLoad({ filter: /\.js$/ }, async (args) => {
              const fs = await import('fs');
              let contents = await fs.promises.readFile(args.path, 'utf8');
              
              // Replace import.meta.url with globalThis.importMetaUrl
              contents = contents.replace(/import\.meta\.url/g, 'globalThis.importMetaUrl');
              
              return {
                contents,
                loader: 'js',
              };
            });
          },
        },
      ],
    });
    
    console.log('‚úÖ Worker bundled successfully!');
    console.log('üì¶ Output: ./public/speech-worker-bundled.js');
  } catch (error) {
    console.error('‚ùå Failed to bundle worker:', error);
    process.exit(1);
  }
}

buildWorker();